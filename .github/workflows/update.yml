name: Update Charts

on:
  schedule:
    # Runs daily at 6:15 p.m. PDT → 01:15 UTC
    - cron: "15 1 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install notebook nbconvert pandas numpy geopandas xlrd requests matplotlib openpyxl seaborn

      # 4️⃣ Ensure folders exist
      - name: Create folders
        run: |
          mkdir -p data
          mkdir -p docs/charts

      # 5️⃣ Run notebook safely
      - name: Run notebook
        run: |
          python -m nbconvert \
            --to notebook \
            --execute read_results.ipynb \
            --output read_results.ipynb \
            --ExecutePreprocessor.allow_errors=True

      # 6️⃣ Insert/Update "last updated" date (idempotent, robust)
      - name: Insert/Update last updated date
        env:
          TZ: America/Los_Angeles
        run: |
          set -euo pipefail
          DATE="$(date +"%B %d, %Y %I:%M %p %Z")"
          echo "Using DATE='$DATE'"

          # Find all docs/**/index.html
          mapfile -t files < <(find docs -type f -name "index.html")

          if ((${#files[@]}==0)); then
            echo "⚠️ No HTML files found under docs/"
            exit 0
          fi

          for file in "${files[@]}"; do
            # If there's an update-date span, replace its inner text (handles ' or " and newlines)
            if grep -Eq 'id[[:space:]]*=[[:space:]]*["'"'"']update-date["'"'"']' "$file"; then
              perl -0777 -pe 's{(<span\b[^>]*\bid\s*=\s*["'\''"]update-date["'\''"][^>]*>).*?(</span>)}{$1$ENV{DATE}$2}gsi' -i "$file"
              echo "✅ Updated update-date span in: $file"
            # Otherwise, replace a literal DATE_PLACEHOLDER if present
            elif grep -q 'DATE_PLACEHOLDER' "$file"; then
              perl -0777 -pe 's{DATE_PLACEHOLDER}{$ENV{DATE}}g' -i "$file"
              echo "✅ Replaced DATE_PLACEHOLDER in: $file"
            else
              echo "↷ Skipped (no update-date span or placeholder): $file"
            fi
          done

      # 7️⃣ Commit updated files
      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/ read_results.ipynb
          git commit -m "Auto-update charts [skip ci]" || echo "No changes to commit"
          git push
